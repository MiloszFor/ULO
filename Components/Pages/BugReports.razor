@page "/bug-report"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using ULO.Models.Entities
@using ULO.UI.Models.Entities
@inject ULODbContext _dbcontext
@rendermode InteractiveServer
@attribute [Authorize]


<div class="container">

        <div class="row">
        <InputTextArea id="dynamic-textarea" style="min-height: 150px; height: 50vh;" @bind-Value="reports.ReportText" />
        </div>
        <div class="row justify-content-center">
            <button style="margin-top: 5px; max-width: 15%" class="btn btn-success btn-sm mb-2 w-100" @onclick="async () => await SendReports()">
                Wyślij
            </button>
        </div>
        @if (successMessage is not null)
        {
            <div class="row mt-2">
                <span class="text-success">@successMessage</span>
            </div>
        }
        else{}
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    public User? user { get; set; }

    // Initialize reports to avoid null reference
    public Reports reports { get; set; } = new Reports();
    private string? successMessage = null;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateTask;
        var userLogin = authenticationState.User.FindFirst(ClaimTypes.Name)?.Value;

        if (userLogin is not null)
        {
            user = _dbcontext.Users.FirstOrDefault(u => u.Login == userLogin);
        }
    }

    public async Task SendReports()
    {
        // Ensure reports.ReportText is not null or empty
        if (string.IsNullOrWhiteSpace(reports.ReportText)) return;

        try
        {
            Reports newReports = new Reports { ReportText = reports.ReportText, UserId = user?.Id ?? 0 };
            await _dbcontext.Reports.AddAsync(newReports);
            await _dbcontext.SaveChangesAsync();
            successMessage = "Wysłano zgłoszenie";
        }
        catch (Exception e)
        {
            // Log the exception or handle it as needed
        }
    }
}

