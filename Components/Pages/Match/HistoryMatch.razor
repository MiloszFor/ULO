@page "/historia-meczy"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using ULO.Models.Entities
@using ULO.UI.Models.Entities
@using ULO.UI.Models
@inject ULODbContext _dbcontext
@rendermode InteractiveServer

<style>
	a {
		text-decoration: none;
		color: #000;
	}

		a:hover {
			color: #000;
		}

	#test:hover {
		box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 1);
	}
</style>

<div class="container">
	@if (historyMatches is not null)
	{
		foreach (var item in historyMatches)
		{
			<a href="/mecz/@item.Id">
				<div id="test" class="row text-center" style="margin: 10px 0 10px 0; border-bottom: solid 1px #000">
					<div class="col-md-4 d-flex flex-column align-items-center">
						<div>
							@if (item.HostTeamLogo != null && item.HostTeamLogo.Length > 0)
							{
								<img src="@($"data:image/png;base64,{Convert.ToBase64String(item.HostTeamLogo)}")" alt="Logo" class="rounded-circle img-fluid" style="width: 150px; height: 150px; margin-bottom: 15px;" />
							}
						</div>
						<div>
							<h3>@item.HostTeamName</h3>
						</div>
					</div>
					<div class="col-md-4 d-flex flex-column justify-content-center">
						<div class="row d-flex align-items-center justify-content-center">
							@if (@item.Score1Value is null || @item.Score2Value is null)
							{
								<h3>Wynik nie uzupełniony</h3>
							}
							else
							{
								<h1 style="font-weight: bold;">@item.Score1Value : @item.Score2Value</h1>
							}
							@if (ownerTeamNameList.Contains(item.HostTeamName) || ownerTeamNameList.Contains(item.GuestTeamName))
							{
								<button><a href="/wynik-meczu/@item.Id">Wstaw wynik meczu</a></button>
							}
						</div>
						<div>
							<h4>@item.MatchDate</h4>
						</div>
					</div>
					<div class="col-md-4 d-flex flex-column align-items-center">
						<div>
							@if (item.GuestTeamLogo != null && item.GuestTeamLogo.Length > 0)
							{
								<img src="@($"data:image/png;base64,{Convert.ToBase64String(item.GuestTeamLogo)}")" alt="Logo" class="rounded-circle img-fluid" style="width: 150px; height: 150px; margin-bottom: 15px;" />
							}
						</div>
						<div>
							<h3>@item.GuestTeamName</h3>
						</div>
					</div>
				</div>
			</a>
		}
	}
	else
	{
		<h1 style="text-align:center;font-weight:bold;">Brak meczy</h1>
	}
</div>

@code {
	public List<HistoryMatchDashboard>? historyMatches { get; set; }
	[CascadingParameter]
	public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

	public List<Team>? ownerTeam { get; set; }
	public User? user { get; set; }
	public List<string>? ownerTeamNameList { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await GetMatches();
		await CheckMatchScoreBtn();
	}

	public async Task CheckMatchScoreBtn()
	{
		var authenticationState = await AuthenticationStateTask;
		var userLogin = authenticationState?.User.FindFirst(ClaimTypes.Name)?.Value;

		if (!string.IsNullOrEmpty(userLogin))
		{
			user = await _dbcontext.Users.FirstOrDefaultAsync(u => u.Login == userLogin);
		}

		if (historyMatches != null && user != null)
		{
			var teamNameList = historyMatches
				.SelectMany(match => new[] { match.HostTeamName, match.GuestTeamName })
				.Distinct()
				.ToList();

			ownerTeam = await _dbcontext.Team
				.Where(t => teamNameList.Contains(t.TeamName) && t.OwnerId == user.Id)
				.ToListAsync();

			ownerTeamNameList = ownerTeam
				.Select(n => n.TeamName)
				.Distinct()
				.ToList();
		}
	}

	public async Task GetMatches()
	{
		try
		{
			historyMatches = await _dbcontext.Database.SqlQueryRaw<HistoryMatchDashboard>(
				"SELECT m.Id AS Id, " +
				"t.TeamName AS GuestTeamName, " +
				"t.Logo AS GuestTeamLogo, " +
				"tt.TeamName AS HostTeamName, " +
				"tt.Logo AS HostTeamLogo, " +
				"m.MatchDate AS MatchDate, " +
				"p.Score1Value, p.Score2Value " +
				"FROM match m " +
				"JOIN team t ON m.GuestTeamId = t.Id " +
				"JOIN team tt ON m.HostTeamId = tt.Id " +
				"LEFT JOIN matchpoz p ON p.MatchId = m.Id " +
				"WHERE m.Status = 'A' " +
				"ORDER BY m.MatchDate DESC"
			).ToListAsync();
		}
		catch (Exception ex)
		{
			// Log the exception if necessary
		}
	}
}
