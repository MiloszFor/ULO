@page "/historia-meczy"
@using Microsoft.EntityFrameworkCore
@using ULO.UI.Models
@inject ULODbContext _dbcontext
@rendermode InteractiveServer

<style>
	a{
		text-decoration: none;
		color: #000;
	}
	a:hover{
			color: #000;
	}
	#test:hover{
		box-shadow: 0px 0px 15px 0px rgba(0, 0, 0, 1);
	}
</style>

<div class="container">
    @if(historyMatches is not null)
    {
        foreach(var item in historyMatches)
        {
            <a href="/mecz/@item.Id">
				<div id="test" class="row text-center" style="margin: 10px 0 10px 0; border-bottom: solid 1px #000">

					<div class="col-md-4 d-flex flex-column align-items-center">
						<div>
							@if (item.HostTeamLogo != null && item.HostTeamLogo.Length > 0)
							{
								<img src="@($"data:image/png;base64,{Convert.ToBase64String(item.HostTeamLogo)}")" alt="Logo" class="rounded-circle img-fluid" style="width: 150px; height: 150px; margin-bottom: 15px;" />
							}
						</div>
						<div>
							<h3>@item.HostTeamName</h3>
						</div>
					</div>

					<div class="col-md-4 d-flex flex-column justify-content-center">
						<div class="row d-flex align-items-center justify-content-center">
							@if (@item.Score1Value is null || @item.Score1Value is null)
							{
								<h3>Wynik nie uzupełniony</h3>
							}
							else
							{
								<h1 style="font-weight: bold;">@item.Score1Value : @item.Score2Value</h1>
							}

						</div>
						<div>
							<h4>@item.MatchDate</h4>
						</div>
					</div>

					<div class="col-md-4 d-flex flex-column align-items-center">
						<div>
							@if (item.GuestTeamLogo != null && item.GuestTeamLogo.Length > 0)
							{
								<img src="@($"data:image/png;base64,{Convert.ToBase64String(item.GuestTeamLogo)}")" alt="Logo" class="rounded-circle img-fluid" style="width: 150px; height: 150px; margin-bottom: 15px;" />
							}
						</div>
						<div>
							<h3>@item.GuestTeamName</h3>
						</div>
					</div>

				</div>
            </a>
            
        }
    }
</div>
@code{
    public List<HistoryMatchDashboard>? historyMatches { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetMatches();
    }

    public async Task GetMatches()
    {
        try
        {
            historyMatches = await _dbcontext.Database.SqlQueryRaw<HistoryMatchDashboard>(
                "SELECT m.Id as 'Id', t.TeamName as 'HostTeamName', t.Logo as 'HostTeamLogo', " +
                "tt.TeamName as 'GuestTeamName', tt.Logo as 'GuestTeamLogo', " +
                "m.MatchDate as 'MatchDate', p.Score1Value, p.Score2Value " +
                "From match m " +
                "join team t on m.GuestTeamId = t.Id " +
                "join team tt on m.HostTeamId = tt.Id " +
                "left join matchpoz p on p.matchid = m.id " +
                "where m.Status = 'A' " +
                "order by m.MatchDate desc"
            ).ToListAsync();
        }
        catch(Exception ex){ }
    }
}