@page "/profil/{profileId}"
@inject ULODbContext _dbcontext

<div class="container mt-5">
    <div class="card shadow">
        <div class="row g-0">
            <div class="col-md-4 d-flex align-items-center justify-content-center bg-light">
                <img src="https://via.placeholder.com/150" class="img-fluid rounded-circle" alt="Player Avatar" style="max-width: 150px;">
            </div>

            <div class="col-md-8">
                <div class="card-body">
                    <h3 class="card-title mb-3">@userDetails?.FirstName @userDetails?.LastName</h3>
                    <p class="card-text">
                        <strong>Klub:</strong> <span>@userDetails?.TeamName</span>
                    </p>
                    <p class="card-text">
                        <strong>Liczba bramek:</strong> <span>@userDetails?.Goals</span>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? profileId { get; set; } // Zauważ, że nazwa parametru musi pasować do strony (case-sensitive)

    private UserDetails? userDetails;

    private class UserDetails
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? TeamName { get; set; }
        public int Goals { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // // Pobierz dane użytkownika na podstawie profileId
        // var user = await _dbcontext.Users
        //     .Where(u => u.Id == profileId) // Zakładamy, że Id jest kluczem w tabeli Users
        //     .Select(u => new UserDetails
        //         {
        //             FirstName = u.FirstName,
        //             LastName = u.LastName,
        //             TeamName = u.TeamName,
        //             Goals = u.Goals
        //         })
        //     .FirstOrDefaultAsync();

        // // Przypisz dane do zmiennej userDetails
        // userDetails = user;
    }
}
