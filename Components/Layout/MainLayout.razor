@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using ULO.Models.Entities
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject ULODbContext _dbcontext

<ULO.UI.Components.Pages._Host />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <AuthorizeView>
            <Authorized>
                <div class="top-row px-4">
                    @if (user is not null)
                    {
                        <a href="profil"><h3>Id#@user.Id @user.FirstName @user.LastName</h3></a>
                    }
                    <a class="btn btn-danger btn-lg active" href="logout">Wyloguj</a>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="top-row px-4">
                    <a class="btn btn-success btn-lg active" href="login">Zaloguj</a>
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    public User? user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask is null)
            return;

        var authenticationState = await AuthenticationStateTask;
        var userLogin = authenticationState.User.FindFirst(ClaimTypes.Name)?.Value;

        if (!string.IsNullOrWhiteSpace(userLogin))
        {
            user = await _dbcontext.Users
                .Where(u => u.Login == userLogin)
                .FirstOrDefaultAsync();
        }
    }
}
